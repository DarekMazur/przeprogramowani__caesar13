var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _ROT13ROT = require('../ROT13/ROT13');
var _ROT13ROTDefault = _parcelHelpers.interopDefault(_ROT13ROT);
const Encrypt = input => {
  const plainTextArray = input.split('');
  const plainTextUniversalChars = [];
  function polishToUniversalLetter(letter) {
    switch (letter) {
      case 'ą':
        return 'a';
      case 'ć':
        return 'c';
      case 'ę':
        return 'e';
      case 'ł':
        return 'l';
      case 'ń':
        return 'n';
      case 'ó':
        return 'o';
      case 'ś':
        return 's';
      case 'ż':
      case 'ź':
        return 'z';
      case 'Ą':
        return 'A';
      case 'Ć':
        return 'C';
      case 'Ę':
        return 'E';
      case 'Ł':
        return 'L';
      case 'Ń':
        return 'N';
      case 'Ó':
        return 'O';
      case 'Ś':
        return 'S';
      case 'Ż':
      case 'Ź':
        return 'Z';
      default:
        return letter;
    }
    ;
  }
  ;
  plainTextArray.forEach(letter => {
    plainTextUniversalChars.push(polishToUniversalLetter(letter));
  });
  // const rot13 = (plainText) => {
  // const encryptionVariable = 13;
  // const encryption = [];
  // plainText.forEach(letter => {
  // if (allLetters.some((el) => letter.toLowerCase() === el )) {
  // const letterPosition = allLetters.indexOf(letter.toLowerCase());
  // letter === letter.toUpperCase() ? (
  // encryption.push(allLetters[(letterPosition + encryptionVariable) % (allLetters.length)].toUpperCase())
  // ) : (
  // encryption.push(allLetters[(letterPosition + encryptionVariable) % (allLetters.length)])
  // )
  // } else {
  // encryption.push(letter)
  // }
  // })
  // return(
  // encryption.join('')
  // );
  // }
  return _ROT13ROTDefault.default(plainTextUniversalChars);
};
exports.default = Encrypt;
